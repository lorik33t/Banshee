#!/usr/bin/env node

// Gemini Context Subagent - Large context analysis specialist
// This script acts as a bridge between Claude's Task tool and the Gemini CLI

import { spawn } from 'child_process';
import { existsSync, readFileSync } from 'fs';
import { join } from 'path';

// Read task input from stdin
let input = '';
process.stdin.setEncoding('utf8');
process.stdin.on('data', (chunk) => {
  input += chunk;
});

process.stdin.on('end', () => {
  // Get Gemini config
  const configPath = join(process.cwd(), 'repos', '.gemini-config');
  if (!existsSync(configPath)) {
    console.error('Gemini is not configured. Please authenticate first.');
    process.exit(1);
  }
  
  // Read API key from config
  const config = JSON.parse(readFileSync(configPath, 'utf8'));
  const apiKey = config.apiKey;
  
  if (!apiKey) {
    console.error('Gemini API key not found. Please authenticate first.');
    process.exit(1);
  }
  
  // Run Gemini with the task
  const gemini = spawn('npx', [
    '@google/gemini-cli',
    '--api-key', apiKey,
    '--model', 'gemini-1.5-pro',
    '--context-window', '2000000',  // 2M token context
    input
  ], {
    cwd: process.cwd(),
    env: { ...process.env, GEMINI_API_KEY: apiKey }
  });
  
  // Stream output
  gemini.stdout.on('data', (data) => {
    process.stdout.write(data);
  });
  
  gemini.stderr.on('data', (data) => {
    process.stderr.write(data);
  });
  
  gemini.on('close', (code) => {
    process.exit(code || 0);
  });
});